# Remote Controlled Sites

## About the project
At Paderborn University, we were interested about how to make online learning more enjoyable and interactive for students. During our search, we discovered the [Vircadia](https://vircadia.com/) project, an open source metaverse that allows to have more natural conversations and hold presentations. Vircadia provides a simple web entity object that is basically a browser for the user. For our use case, we needed screen share capabilities that are easy to use, which resulted in this project. A user can "create" websites (called screens) that load an iframe by default and the user can easily start screensharing to replace any of these websites with his screen. It was important that no interaction by a user inside the game is required.

## Infrastructure and Design
To transmit a video from and to other browsers without the use of plugins, the [WebRTC](https://webrtc.org/) standard can be used. Unfortunately, this standard only allows peer-to-peer connections, which is not feasible for a bigger amount of users (many websites cite 6 users as maximum), as the participant providing the video stream has to transmit it to everyone himself. In order to skip this limitation, an SFU can be used, which acts as a central server that distributes the streams. For this tool, [Mediasoup](https://mediasoup.org/) was selected as the SFU.

As Mediasoup provides JavaScript bindings, the development backend is coded in TypeScript with an express.js server. Socket.io is used as a WebSocket wrapper to push events to the clients (for example when screen share started). Another problem that had to be solved is that WebRTC does not notice if connections drop, potentially leading to memory leaks. This was solved by assigning user ids by providing [JWTs](https://jwt.io/) that are required for socket and http connections. This way, for every request, the server can identify the user. As socket.io does notice when connections drop (by a heartbeat mechanism), the server requires the user to first connect the websocket before a webrtc connection can be established. If the socket connections drops, the user is automatically removed from webrtc.

For the frontend, React together with TypeScript and [MUI](https://mui.com/) as design framework were selected, as they provide a convenient way to create a user friendly application.